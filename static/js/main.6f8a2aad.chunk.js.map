{"version":3,"sources":["getData.js","wordSelectBar.js","wordCurve.js","main.js","serviceWorker.js","index.js"],"names":["serverURL","wrapUrl","url","trueURL","startsWith","Date","getTime","getData","callback","data","reqwest","type","method","contentType","success","Option","WordSelectBar","props","state","candidates","fetching","words","fetchCandidateWord","query","setState","getCandidate","handleChange","updateCurve","debounce","this","mode","value","placeholder","notFoundContent","size","filterOption","onSearch","onChange","style","width","map","d","key","Component","WordCurve","getOption","values","years","Object","keys","series","name","smooth","title","text","join","xAxis","yAxis","legend","option","height","window","innerHeight","defaultProps","Main","getCurve","res","bind","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6f8a2aad.chunk.js","sourcesContent":["import reqwest from 'reqwest';\r\n\r\nconst serverURL = 'http://101.6.69.26:5003'; // same as backend\r\n\r\nfunction wrapUrl(url) {\r\n    let trueURL;\r\n    if (url.startsWith('//') || url.startsWith('http'))\r\n        trueURL = url;\r\n    else\r\n        trueURL = serverURL + url;\r\n    trueURL += '?time=' + (new Date().getTime());\r\n    return trueURL;\r\n}\r\n\r\nfunction getData(url, callback, data = {}) {\r\n    reqwest({\r\n        url: wrapUrl(url),\r\n        type: 'json',\r\n        method: 'get',\r\n        data: data,\r\n        contentType: 'application/json',\r\n        success: callback\r\n    });\r\n}\r\n\r\nexport function getCurve(words, callback) {\r\n    getData('/getCurve', callback, {words: words});\r\n}\r\n\r\nexport function getCandidate(query, callback) {\r\n    getData('/getCandidate', callback, {query: query});\r\n}","import React, {Component} from 'react';\r\nimport debounce from 'lodash/debounce';\r\nimport {getCandidate} from \"./getData\";\r\nimport {Select, Spin} from 'antd';\r\n\r\nconst {Option} = Select;\r\n\r\nexport class WordSelectBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.fetchCandidateWord = debounce(this.fetchCandidateWord, 800);\r\n    }\r\n\r\n    state = {\r\n        candidates: [],\r\n        fetching: false,\r\n        words: [],\r\n    };\r\n    fetchCandidateWord = query => {\r\n        // this.lastFetchId += 1;\r\n        // const fetchId = this.lastFetchId;\r\n        this.setState({candidates: [], fetching: true});\r\n        getCandidate(query, (candidates) => {\r\n            this.setState({candidates, fetching: false});\r\n        });\r\n    };\r\n\r\n    handleChange = words => {\r\n        this.setState({\r\n            candidates: [],\r\n            fetching: false,\r\n            words: words,\r\n        });\r\n        this.props.updateCurve(words);\r\n    };\r\n\r\n    render() {\r\n        const {fetching, candidates, words} = this.state;\r\n        return (\r\n            <Select\r\n                mode=\"multiple\"\r\n                value={words}\r\n                placeholder=\"Search to select words to display\"\r\n                notFoundContent={fetching ? <Spin size=\"small\"/> : null}\r\n                filterOption={false}\r\n                onSearch={this.fetchCandidateWord}\r\n                onChange={this.handleChange}\r\n                style={{width: '100%'}}\r\n            >\r\n                {candidates.map(d => (\r\n                    <Option key={d}>{d}</Option>\r\n                ))}\r\n            </Select>\r\n        );\r\n    }\r\n}\r\n","import React, {Component} from 'react';\r\nimport ReactEcharts from 'echarts-for-react';\r\n\r\nexport class WordCurve extends Component {\r\n    getOption = (values, years) => {\r\n        const words = Object.keys(values);\r\n        const series = words.map(key => {\r\n            return {\r\n                data: values[key],\r\n                type: 'line',\r\n                name: key,\r\n                smooth: true,\r\n            }\r\n        });\r\n        return {\r\n            title: {\r\n                text: 'Curve of ' + words.join(', '),\r\n            },\r\n            xAxis: {\r\n                type: 'category',\r\n                data: years,\r\n                name: 'Year'\r\n            },\r\n            yAxis: {\r\n                type: 'value',\r\n            },\r\n            legend: {\r\n                data: words,\r\n            },\r\n            series: series,\r\n        };\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <ReactEcharts key={Object.keys(this.props.values).join(',')}\r\n                option={this.getOption(this.props.values, this.props.years)}\r\n                style={{height: window.innerHeight, width: '80%'}}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nWordCurve.defaultProps = {\r\n    values: {\r\n        'testWord1': [0.1, 0.1, 0.2, 0.5, 0.7, 0.6, 0.5, 0.3, 0.3],\r\n        'testWord2': [0.2, 0.3, 0.8, 0.7, 0.5, 0.1, 0.1, 0.1, 0.1],\r\n    },\r\n    years: [2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023]\r\n};","import React, {Component} from 'react';\r\nimport {WordSelectBar} from \"./wordSelectBar\";\r\nimport {getCurve} from \"./getData\";\r\nimport {WordCurve} from \"./wordCurve\";\r\n\r\nexport class Main extends Component {\r\n    state = {\r\n        values: {},\r\n        years: []\r\n    };\r\n    updateCurve = (words) => {\r\n        getCurve(words, (res) => {\r\n            this.setState({values: res.values || {}, years: res.years || []});\r\n        })\r\n    };\r\n\r\n    render() {\r\n        const {values, years} = this.state;\r\n        return (\r\n            <div>\r\n                <WordSelectBar updateCurve={this.updateCurve.bind(this)}/>\r\n                <WordCurve values={values} years={years}/>\r\n            </div>\r\n        )\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Main} from \"./main\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Main/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}